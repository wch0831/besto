<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- <mapper namespace="userNameSpace"> -->
<!-- <mapper namespace="com.biz.mapper.MemberMap"> -->

<mapper namespace="com.com.mapper.MemberMapper">
	<resultMap id="memberMap" type="com.com.member.MemberVO">
		<id 	property="usersSeq" 	column="users_seq" />
		<result property="usersId" 		column="users_id" />
		<result property="usersPw" 		column="users_pw" />
		<result property="usersName" 	column="users_name" />
		<result property="usersEmail" 	column="users_email" />
		<result property="usersAddress" 	column="users_address" />
		<result property="usersDetailAddress" 		column="users_detail_address" />
		<result property="usersPhone" 		column="users_phone" />
		<result property="usersBirth" 		column="users_birth" />
		<result property="usersBank" 		column="users_bank" />
		<result property="usersAccount" 		column="users_account" />
		<result property="usersDel" 	column="users_del" />
		<result property="usersGrant" 	column="users_grant" />			

	</resultMap>
	
 	<!-- <sql id="commonSelect">user_name, user_gubun</sql> --> 	
 	
 	<!-- 멤버 로그인 -->
 	<select id="login" parameterType="com.com.member.MemberVO" resultMap="memberMap">
 		select users_seq, users_name, users_id, users_grant
 		from users
 		where users_id=#{usersId} and users_pw=#{usersPw} and users_del='n'
 	</select>
	
	<!-- 멤버 회원가입 -->
	<insert id="memberRegister" parameterType="com.com.member.MemberVO">
		insert into member(users_seq, users_id, users_pw, users_name, users_email, users_address, 
		users_detail_address, users_phone, users_birth, users_del, users_grant)
		values(users_seq.nextval, #{usersId}, #{usersPw}, #{usersName}, #{usersEmail}, #{usersAddress},
		#{usersDetailAddress}, #{usersPhone}, #{usersBirth}, 'n', 'u')
	</insert>
	
	<select id="checkId" parameterType="String" resultType="Integer">
 		select count(*) from users
      	where users_id = #{value}
 	</select>
	
	<select id="findSeq" parameterType="String" resultType="Integer">
 		select users_seq
		from users
		where users_id=#{value} and users_del='n'
 	</select>
	
	<!-- 멤버 리스트(유저만)
	<select id="memberList" parameterType="com.com.member.MemberVO" resultMap="memberMap">
 		select * from users
 	  <where>
 		<if test="searchGubun != null"> 
 			${searchGubun}=#{searchStr}
 		</if>
 	  </where>
 		order by user_seq
 	</select>
	-->
	
	
	<!-- 멤버 디테일 -->
	<select id="memberDetail" parameterType="com.com.member.MemberVO" resultMap="memberMap">
 		select users_id, users_name, users_email, users_address, users_detail_address, users_phone, users_birth
		from users
		where users_id=#{usersId} and users_pw=#{usersPw} and users_del='n'
 	</select>
	 
	
	
	<!-- 유저 탈퇴 -->
	<update id="memberDelete" parameterType="com.com.member.MemberVO">
		update users
		 	   set users_grant='0', users_del='y'
		 	   where users_id=#{usersId} and users_pw=#{usersPw} and users_del='n'
	</update>
	
	
	
	<!-- 유저 정보 수정 -->	
	<update id="memberUpdate" parameterType="com.com.member.MemberVO">
		update users
		       set users_name=#{usersName}, users_pw=#{usersPw}, users_email=#{usersEmail},
		       users_address=#{usersAddress}, users_detail_address=#{usersDetailAddress}, 
		       users_phone=#{usersPhone}, users_birth=#{usersBirth}
			   where users_id=#{usersId} and users_del='n'
	</update>
	

	<update id="changePassword" parameterType="com.com.member.MemberVO">
		update users
		   set users_pw=#{usersPw}
	     where users_email=#{usersEmail} and users_id=#{usersId} and users_del='n'
	</update>

	<select id="findId" parameterType="com.com.member.MemberVO" resultType="String">
 		select users_id
		from users
		where users_email=#{usersEmail} and users_name=#{usersName} and users_del='n'
 	</select>
	
	
</mapper>	

